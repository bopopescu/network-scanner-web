<?xml version="1.0" standalone="no"?>
<?xml-stylesheet href="jquery.svg.packet-1.1.1/jquery.svg.css" type="text/css"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" onload="init()">
    <script type="text/javascript" xlink:href="jquery-1.2.6.js"></script>
    <script type="text/javascript" xlink:href="jquery.svg.package-1.1.1/jquery.svg.js"></script>
    <script type="text/javascript" xlink:href="jquery.svg.package-1.1.1/jquery.svganim.js"></script>
    <script type="text/javascript" xlink:href="jquery.svg.package-1.1.1/jquery.svgfilter.js"></script>
    <script type="text/javascript" xlink:href="jquery.svg.package-1.1.1/jquery.svggraph.js"></script>
    <!-- <script type="text/javascript" xlink:href="circle-anim.js"></script> -->
    
    <script>
        <![CDATA[
        function toRadians(degrees){
            var pi = Math.PI;
            var radians = (degrees * (pi/180));
            return radians;
        }
        
        
        function circle(radius, angle0, angle1, steps, interval, obj){
            var dangle = angle1 - angle0;
            var sangle = dangle  / steps;
            var x = 700;
            var y = 400;
            var cx = x - radius * Math.cos(toRadians(angle0));
            var cy = y + radius * Math.sin(toRadians(angle0));
            
            for(var i = 0; i < steps; i++){
                angle0 += sangle;
                x = cx + radius * Math.cos(angle0 * Math.PI / 180);
                y = cy - radius * Math.sin(angle0 * Math.PI / 180);
                $(obj).animate({'svg-cx': x, 'svg-cy': y}, interval / steps);
            }
            return [x, y];
        }
        
        function byClassName(className){
            filters = className.split(".");
            
            if(filters[0] == ""){
                elements = $("svg *");
            }else{
                elements = $(filters[0]);
            }
            
            var retValue = new Array();
            $(elements).each(function(){
                
                if(this.className.baseVal == filters[1]){
                    retValue.push(elements[i]);
                }
            });
            alert(retValue.length);
            return $(retValue);
        }
        
        function init(){
            $("#moveCircle").click(function(){
                x = this.cx.baseVal.value;
                y = this.cy.baseVal.value;
                cx = $("#c1").cx.baseVal.value;
                cy = $("#c1").cx.vaseVal.value;
                alert(x);
                alert(y);
                angle = 0;
                angle1 = 90;
                circle(300, angle, angle1, 360, 20, this);
            });
            
            $("#moveCircle").mouseover(function(){
                $(this).animate({'svg-stroke-opacity': '100%', 'svg-stroke': 'black', 'svg-stroke-width': 2}, 300);
            });
            
            $("#moveCircle").mouseout(function(){
                $(this).animate({'svg-stroke-opacity': '0%', 'svg-stroke': 'none', 'svg-stroke-width': 0}, 300);
            });
        }
        ]]>
    </script>
    
    <circle class="background-path" cx="400" cy="400" r="300" style="fill:none;stroke:#CCC;stroke-width:2" id="c1"/>
    <circle class="node" r="10" cx="700" cy="400" id="moveCircle" style="fill:green"/>
</svg>
